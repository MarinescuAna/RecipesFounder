// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RecipesFounder.DataAccessLayer.Repository;

namespace RecipesFounder.DataAccessLayer.Repository.Migrations
{
    [DbContext(typeof(RecipeFounderDbContext))]
    [Migration("20211209164129_First")]
    partial class First
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0");

            modelBuilder.Entity("RecipesFounder.DataAccessLayer.Domain.Domain.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AddedDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ExternalRecipe")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RecipeID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserID")
                        .HasColumnType("TEXT");

                    b.HasKey("CommentID");

                    b.HasIndex("RecipeID");

                    b.HasIndex("UserID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("RecipesFounder.DataAccessLayer.Domain.Domain.Favorite", b =>
                {
                    b.Property<int>("FavoriteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ExternalRecipe")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RecipeID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserID")
                        .HasColumnType("TEXT");

                    b.HasKey("FavoriteID");

                    b.HasIndex("RecipeID");

                    b.HasIndex("UserID");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("RecipesFounder.DataAccessLayer.Domain.Domain.Ingredient", b =>
                {
                    b.Property<int>("IngredientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("Amount")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("RecipeID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Unit")
                        .HasColumnType("TEXT");

                    b.HasKey("IngredientID");

                    b.HasIndex("RecipeID");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("RecipesFounder.DataAccessLayer.Domain.Domain.Rating", b =>
                {
                    b.Property<int>("RatingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ExternalRecipe")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Hearts")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Likes")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RecipeID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Unlikes")
                        .HasColumnType("INTEGER");

                    b.HasKey("RatingID");

                    b.HasIndex("RecipeID");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("RecipesFounder.DataAccessLayer.Domain.Domain.Recipe", b =>
                {
                    b.Property<int>("RecipeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageContent")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PreparationDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserID")
                        .HasColumnType("TEXT");

                    b.HasKey("RecipeID");

                    b.HasIndex("UserID");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("RecipesFounder.DataAccessLayer.Domain.Domain.User", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(254);

                    b.Property<string>("AccessToken")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AccessTokenExpDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("Password")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.HasKey("Email");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RecipesFounder.DataAccessLayer.Domain.Domain.Comment", b =>
                {
                    b.HasOne("RecipesFounder.DataAccessLayer.Domain.Domain.Recipe", "Recipe")
                        .WithMany("Comments")
                        .HasForeignKey("RecipeID");

                    b.HasOne("RecipesFounder.DataAccessLayer.Domain.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("RecipesFounder.DataAccessLayer.Domain.Domain.Favorite", b =>
                {
                    b.HasOne("RecipesFounder.DataAccessLayer.Domain.Domain.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeID");

                    b.HasOne("RecipesFounder.DataAccessLayer.Domain.Domain.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("RecipesFounder.DataAccessLayer.Domain.Domain.Ingredient", b =>
                {
                    b.HasOne("RecipesFounder.DataAccessLayer.Domain.Domain.Recipe", "Recipe")
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecipesFounder.DataAccessLayer.Domain.Domain.Rating", b =>
                {
                    b.HasOne("RecipesFounder.DataAccessLayer.Domain.Domain.Recipe", "Recipe")
                        .WithMany("Ratings")
                        .HasForeignKey("RecipeID");
                });

            modelBuilder.Entity("RecipesFounder.DataAccessLayer.Domain.Domain.Recipe", b =>
                {
                    b.HasOne("RecipesFounder.DataAccessLayer.Domain.Domain.User", "User")
                        .WithMany("Recipes")
                        .HasForeignKey("UserID");
                });
#pragma warning restore 612, 618
        }
    }
}
